classdef nsd_app_markgarbage < nsd_app

	properties (SetAccess=protected,GetAccess=public)

	end % properties

	methods

		function nsd_app_markgarbage_obj = nsd_app_markgarbage(varargin)
			% NSD_APP_MARKGARBAGE - an app to help exclude garbage data from experiments
			%
			% NSD_APP_MARKGARBAGE_OBJ = NSD_APP_MARKGARBAGE(EXPERIMENT)
			%
			% Creates a new NSD_APP_MARKGARBAGE object that can operate on
			% NSD_EXPERIMENTS. The app is named 'nsd_app_markgarbage'.
			%
				experiment = [];
				name = 'nsd_app_markgarbage';
				if numel(varargin)>0,
					experiment = varargin{1};
				end
				nsd_app_markgarbage_obj = nsd_app_markgarbage_obj@nsd_app(experiment, name);

		end % nsd_app_markgarbage() creator

		% developer note: it would be great to have a 'markinvalidinterval' companion
		function b = markvalidinterval(nsd_app_markgarbage_obj, nsd_epochset_obj, t0, timeref_t0, t1, timeref_t1)
			% MARKVALIDINTERVAL - mark a valid intervalin an epoch (all else is garbage)
			%
			% B = MARKVALIDINTERVAL(NSD_APP_MARKGARBAGE_APP, NSD_EPOCHSET_OBJ, T0, TIMEREF_T0, ...
			%	T1, TIMEREF_T1)
			%
			% Saves a variable marking a valid interval from T0 to T1 with respect
			% to an NSD_TIMEREFERENCE object TIMEREF_T0 (for T0) and TIMEREF_T1 (for T1) for
			% an NSD_EPOCHSET object NSD_EPOCHSET_OBJ.  Examples of NSD_EPOCHSET objects include
			% NSD_IODEVICE and NSD_PROBE and their subclasses.
			%
			% TIMEREF_T0 and TIMEREF_T1 are saved as a name and type for looking up later.
			%
				% developer note: might be good idea to make sure these times exist at saving
				validinterval.timeref_structt0 = timeref_t0.nsd_timereference_struct();
				validinterval.t0 = t0;
				validinterval.timeref_structt1 = timeref_t1.nsd_timereference_struct();
				validinterval.t1 = t1;

				b = nsd_app_markgarbage_obj.savevalidinterval(nsd_epochset_obj, validinterval);

		end % markvalidinterval()

		function b = savevalidinterval(nsd_app_markgarbage_obj, nsd_epochset_obj, validintervalstruct)
			% SAVEVALIDINTERVAL - save a valid interval structure to the experiment database
			%
			% B = SAVEVALIDINTERVAL(NSD_APP_MARKGARBAGE_OBJ, NSD_EPOCHSET_OBJ, VALIDINTERVALSTRUCT)
			%
			% Saves a VALIDINTERVALSTRUCT to an experment database, in the appropriate place for
			% the NSD_EPOCHSET_OBJ data.
			%
			% If the entry is a duplicate, it is not saved but b is still 1.
			%

				if ~isa(nsd_epochset_obj, 'nsd_probe'),
					error(['do not know how to handle non-probes yet.']);
				end

				[vi,mydoc] = nsd_app_markgarbage_obj.loadvalidinterval(nsd_epochset_obj);
				b = 1;
			
				match = -1;
				for i=1:numel(vi),
					if eqlen(vi(i),validintervalstruct),
						match = i; 
						return; 
					end;
				end

				% if we are here, we found no match
				vi(end+1) = validintervalstruct;

				% save new variable, clearing old
				nsd_app_markgarbage_obj.clearvalidinterval(nsd_epochset_obj);
				newdoc = nsd_app_markgarbage_obj.experiment.newdocument('apps/markgarbage/valid_interval',...
						'valid_interval',vi) +  ...
					nsd_epochset_obj.newdocument() + nsd_app_markgarbage_obj.newdocument(); % order of operations matters! superclasses last
				nsd_app_markgarbage_obj.experiment.database.add(newdoc);
		end; % savevalidinterval()

		function b = clearvalidinterval(nsd_app_markgarbage_obj, nsd_epochset_obj)
			% CLEARVALIDINTERVAL - clear all 'validinterval' records for an NSD_EPOCHSET from experiment database
			% 
			% B = CLEARVALIDINTERVAL(NSD_APP_MARKGARBAGE_OBJ, NSD_EPOCHSET_OBJ)
			%
			% Clears all valid interval entries from the experiment database for object NSD_EPOCHSET_OBJ.
			%
			% Returns 1 on success, 0 otherwise.
			%
			% See also: NSD_APP_MARKGARBAGE/MARKVALIDINTERVAL, NSD_APP_MARKGARBAGE/SAVEALIDINTERVAL, ...
			%      NSD_APP_MARKGARBAGE/LOADVALIDINTERVAL 

				[vi,mydoc] = nsd_app_markgarbage_obj.loadvalidinterval(nsd_epochset_obj);

				if ~isempty(mydoc),
					nsd_app_markgarbage_obj.experiment.database.remove(mydoc);
				end

		end % clearvalidinteraval()

		function [vi,mydoc] = loadvalidinterval(nsd_app_markgarbage_obj, nsd_epochset_obj)
			% LOADVALIDINTERVAL - Load all valid interval records from experiment database
			%
			% [VI,MYDOC] = LOADVALIDINTERVAL(NSD_APP_MARKGARBAGE_OBJ, NSD_EPOCHSET_OBJ)
			%
			% Loads stored valid interval records generated by NSD_APP_MARKGARBAGE/MAKEVALIDINTERVAL
			%
			% MYDOC is the NSD_DOCUMENT that was loaded.
			%
				vi = emptystruct('timeref_structt0','t0','timeref_structt1','t1');

				warning(['not general: if subclass of markgarbage-valid_interval is created, this will fail (issue #88).']);
				searchq = cat(2,nsd_app_markgarbage_obj.searchquery(), ...
					{'document_class.class_name','valid_interval'});

				if isa(nsd_epochset_obj,'nsd_probe'),
					searchq = cat(2,searchq,nsd_epochset_obj.searchquery());
				end

				mydoc = nsd_app_markgarbage_obj.experiment.database.search(searchq);

				if ~isempty(mydoc),
					for i=1:numel(mydoc),
						vi = cat(1,vi,mydoc{i}.document_properties.valid_interval);
					end
				end
		end % loadvalidinterval()

		function [intervals] = identifyvalidintervals(nsd_app_markgarbage_obj, nsd_epochset_obj, timeref, t0, t1)
			% IDENTIFYVALIDINTERVAL - identify valid region within an interval
			%
			% INTERVALS = IDENTIFYVALIDINTERVALS(NSD_APP_MARKGARBAGE_OBJ, NSD_EPOCHSET_OBJ, TIMEREF, T0, T1)
			%
			% Examines whether there is a stored 'validinterval' variable by the app 'nsd_app_markgarbage' for
			% this NSD_EPOCHSET_OBJ, and, if so, returns valid intervals [t1_0 t1_1; t2_0 t2_1; ...] indicating
			% valid snips of data within the range T0 T1 (with respect to NSD_TIMEREFERENCE object TIMEREF).
			% INTERVALS has time with respect to TIMEREF.
			%
				interval = [t0 t1];
				vi = nsd_app_markgarbage_obj.loadvalidinterval(nsd_epochset_obj);
				if isempty(vi),
					return;
				end
				for i=1:size(vi,1),
					% for each marked valid region
					%    Can we project the marked valid region into this timeref?
					%       If not, the region is valid, we have no restrictions to add
					%       If so, then we check to see if the end points are greater or less than t0, t1, and snip out

					


				end
				
		end % identifyvalidinterval

	end % methods

end % nsd_app_markgarbage


